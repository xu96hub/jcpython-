函数：
-函数也是对象（对象是内存中专门用来存储区域的）
-函数可以用来保存可执行的代码，并且可以在需要时，多次调用
-创建函数：def 函数名（[形参1，形参2，…])
-调用函数:加括号是调用，不加代表函数对象
-定义函数实现功能
-函数名规范

函数参数：
参数传递：可以给默认值
	位置参数：
	关键字参数：根据形参名传递
	混合使用位置和关键字参数时必须保证位置参数在前面

任意实参可以传递给形参
	形参中如果传递一个对象，改变形参会影响实参
	此时可以使用浅复制,或者切片：c.copy();c[]

不定长参数：（所有不定长参数只能有一个）
	Def fn（*a）（接受所有位置实参，保存到一个元组中）
	此时，需要遍历元组
	*只能接受位置参数，可以放置任意位置，但是剩下的参数赋值时需要使用关键字赋值
	
	使用**形参，只能放在最后，可以接受关键字参数，保存为字典
	
参数解包：
	传递实参时，也可以在序列类型中添加*号，实现传递
	fn（*a）实参个数必须与形参一致
	
返回值：return 值，仅仅写return或没有return，return为none

帮助说明：即注释

命名空间（namespace）：每一个作用域都有一个命名空间，存储变量的字典
locals（）：获取当前作用域的命名空间
scope=locals（）

函数式编程：
	高阶函数：（1）可以接受函数作为参数（2）可以返回函数
	传递函数相当于传递指定代码
	
匿名函数：简单化函数，用来做参数

map()：可以对可迭代对象中所有元素做指定的操作，然后添加到一个新对象中返回

sort（）：比较大小，对列表元素进行排序
sort（）：可以接收一个关键字参数，key
	key需要一个函数作为一个参数，当设置了函数作为参数
	每次都会以一个列表中的一个元素作为参数来调用函数，并且使用函数的返回值来比较元素的大小
Sorted:与sort用法相似，但其返回一个新对象
例：I.sort(key=str)

闭包：返回函数
	形成闭包：有函数嵌套，返回的是函数
	通过闭包可以创建一些只有当前函数能访问的变量
	可以存放一些私有的数据
	
装饰器：希望实现一些通用操作
	希望在不修改原函数情况下扩展函数
	自动创建一个函数生成函数
	传递旧函数
	装饰器使用解包闭包传递参数
	可以通过@xx来指定装饰器，这样函数将会从内向外安装
